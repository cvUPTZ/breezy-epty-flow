import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { getCorsHeaders } from "../_shared/cors.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface GeminiRequest {
  prompt: string;
  model: 'flash-2.0' | 'flash-1.5' | 'pro';
  analysisType: 'comprehensive' | 'quick' | 'specific';
  businessContext: any;
}

interface GeminiInsight {
  id: string;
  type: 'strategic' | 'financial' | 'operational' | 'competitive' | 'growth';
  title: string;
  content: string;
  confidence: number;
  impact: 'critical' | 'high' | 'medium' | 'low';
  recommendations: string[];
  createdAt: string;
}

serve(async (req: Request) => {
  console.log("Function 'gemini-business-analysis' invoked.");

  const requestOrigin = req.headers.get('Origin');
  const corsHeaders = getCorsHeaders(requestOrigin);

  // Handle OPTIONS preflight request
  if (req.method === "OPTIONS") {
    console.log("Handling OPTIONS request.");
    return new Response("ok", { headers: corsHeaders });
  }

  try {
    const { prompt, model, analysisType, businessContext }: GeminiRequest = await req.json();
    
    const geminiApiKey = Deno.env.get("GEMINI_API_KEY");
    if (!geminiApiKey) {
      throw new Error('GEMINI_API_KEY not configured');
    }

    console.log("Analyzing with Gemini", model, "- Analysis type:", analysisType);

    // Determine which Gemini model to use
    let modelName = 'gemini-1.5-flash';
    if (model === 'flash-2.0') {
      modelName = 'gemini-2.0-flash-exp'; // Use experimental 2.0 if available
    } else if (model === 'pro') {
      modelName = 'gemini-1.5-pro';
    }

    // Enhanced prompt for business analysis
    const enhancedPrompt = `
You are a senior business strategist and AI advisor specializing in the sports technology sector in Algeria and MENA region. 

Context: Analyzing a football analytics startup in Algeria that provides video analysis and performance tracking solutions for professional football clubs.

${prompt}

Please provide strategic business insights in the following JSON format:
{
  "insights": [
    {
      "type": "strategic|financial|operational|competitive|growth",
      "title": "Clear, actionable title in French",
      "content": "Detailed analysis with specific insights, market data, and strategic implications. Use bullet points and clear structure. Focus on Algerian market context.",
      "confidence": 75-95,
      "impact": "critical|high|medium|low",
      "recommendations": [
        "Specific, actionable recommendation 1",
        "Specific, actionable recommendation 2",
        "Specific, actionable recommendation 3"
      ]
    }
  ]
}

Requirements:
- Insights must be in French
- Focus on Algerian football market context
- Include specific data points and market intelligence
- Provide actionable recommendations
- Consider regulatory environment (Loi 18-07)
- Address competitive landscape vs international solutions
- Reference local partnerships (FAF, professional clubs)
- Consider MENA expansion opportunities
`;

    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${modelName}:generateContent?key=${geminiApiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: enhancedPrompt
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 2048,
        },
        safetySettings: [
          {
            "category": "HARM_CATEGORY_HARASSMENT",
            "threshold": "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            "category": "HARM_CATEGORY_HATE_SPEECH",
            "threshold": "BLOCK_MEDIUM_AND_ABOVE"
          }
        ]
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Gemini API error:', errorText);
      throw new Error(`Gemini API error: ${response.status} - ${errorText}`);
    }

    const geminiData = await response.json();
    console.log("Gemini response received:", geminiData);

    if (!geminiData.candidates || !geminiData.candidates[0]) {
      throw new Error('No content generated by Gemini');
    }

    const generatedText = geminiData.candidates[0].content.parts[0].text;
    console.log("Generated text:", generatedText);

    // Try to parse JSON response
    let insights: GeminiInsight[] = [];
    try {
      const jsonMatch = generatedText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const parsedResponse = JSON.parse(jsonMatch[0]);
        insights = parsedResponse.insights?.map((insight: any, index: number) => ({
          ...insight,
          id: `gemini-${Date.now()}-${index}`,
          createdAt: new Date().toISOString()
        })) || [];
      }
    } catch (parseError) {
      console.warn("Failed to parse JSON, creating fallback insight:", parseError);
      
      // Fallback: create insight from raw text
      insights = [{
        id: `gemini-${Date.now()}`,
        type: 'strategic',
        title: 'Analyse Stratégique Gemini',
        content: generatedText,
        confidence: 80,
        impact: 'high',
        recommendations: [
          'Analyser les recommandations dans le contenu détaillé',
          'Implémenter les stratégies suggérées par priorité',
          'Monitorer les KPIs mentionnés'
        ],
        createdAt: new Date().toISOString()
      }];
    }

    console.log("Processed insights:", insights);

    return new Response(
      JSON.stringify({ 
        insights,
        model: modelName,
        analysisType,
        timestamp: new Date().toISOString()
      }),
      {
        headers: { ...corsHeaders, "Content-Type": "application/json" },
        status: 200,
      }
    );

  } catch (error) {
    console.error("Error in gemini-business-analysis:", error);
    return new Response(
      JSON.stringify({ 
        error: error instanceof Error ? error.message : 'Unknown error occurred',
        insights: []
      }),
      {
        headers: { ...corsHeaders, "Content-Type": "application/json" },
        status: 500,
      }
    );
  }
});